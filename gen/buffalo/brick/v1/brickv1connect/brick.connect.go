// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: buffalo/brick/v1/brick.proto

package brickv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/njhale/buffalo/gen/buffalo/brick/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BrickServiceName is the fully-qualified name of the BrickService service.
	BrickServiceName = "buffalo.brick.v1.BrickService"
)

// BrickServiceClient is a client for the buffalo.brick.v1.BrickService service.
type BrickServiceClient interface {
	// Bake a buffalo brick for the taking.
	Bake(context.Context, *connect_go.Request[v1.BakeRequest]) (*connect_go.Response[v1.BakeResponse], error)
	// Take an available buffalo bricks.
	Take(context.Context, *connect_go.Request[v1.TakeRequest]) (*connect_go.Response[v1.TakeResponse], error)
}

// NewBrickServiceClient constructs a client for the buffalo.brick.v1.BrickService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBrickServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BrickServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &brickServiceClient{
		bake: connect_go.NewClient[v1.BakeRequest, v1.BakeResponse](
			httpClient,
			baseURL+"/buffalo.brick.v1.BrickService/Bake",
			opts...,
		),
		take: connect_go.NewClient[v1.TakeRequest, v1.TakeResponse](
			httpClient,
			baseURL+"/buffalo.brick.v1.BrickService/Take",
			opts...,
		),
	}
}

// brickServiceClient implements BrickServiceClient.
type brickServiceClient struct {
	bake *connect_go.Client[v1.BakeRequest, v1.BakeResponse]
	take *connect_go.Client[v1.TakeRequest, v1.TakeResponse]
}

// Bake calls buffalo.brick.v1.BrickService.Bake.
func (c *brickServiceClient) Bake(ctx context.Context, req *connect_go.Request[v1.BakeRequest]) (*connect_go.Response[v1.BakeResponse], error) {
	return c.bake.CallUnary(ctx, req)
}

// Take calls buffalo.brick.v1.BrickService.Take.
func (c *brickServiceClient) Take(ctx context.Context, req *connect_go.Request[v1.TakeRequest]) (*connect_go.Response[v1.TakeResponse], error) {
	return c.take.CallUnary(ctx, req)
}

// BrickServiceHandler is an implementation of the buffalo.brick.v1.BrickService service.
type BrickServiceHandler interface {
	// Bake a buffalo brick for the taking.
	Bake(context.Context, *connect_go.Request[v1.BakeRequest]) (*connect_go.Response[v1.BakeResponse], error)
	// Take an available buffalo bricks.
	Take(context.Context, *connect_go.Request[v1.TakeRequest]) (*connect_go.Response[v1.TakeResponse], error)
}

// NewBrickServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBrickServiceHandler(svc BrickServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/buffalo.brick.v1.BrickService/Bake", connect_go.NewUnaryHandler(
		"/buffalo.brick.v1.BrickService/Bake",
		svc.Bake,
		opts...,
	))
	mux.Handle("/buffalo.brick.v1.BrickService/Take", connect_go.NewUnaryHandler(
		"/buffalo.brick.v1.BrickService/Take",
		svc.Take,
		opts...,
	))
	return "/buffalo.brick.v1.BrickService/", mux
}

// UnimplementedBrickServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBrickServiceHandler struct{}

func (UnimplementedBrickServiceHandler) Bake(context.Context, *connect_go.Request[v1.BakeRequest]) (*connect_go.Response[v1.BakeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buffalo.brick.v1.BrickService.Bake is not implemented"))
}

func (UnimplementedBrickServiceHandler) Take(context.Context, *connect_go.Request[v1.TakeRequest]) (*connect_go.Response[v1.TakeResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("buffalo.brick.v1.BrickService.Take is not implemented"))
}
